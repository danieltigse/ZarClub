package com.catani.zar;

// Generated 18/08/2012 10:09:19 PM by Hibernate Tools 3.4.0.CR1

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.catani.persistence.HibernateUtil;

/**
 * ZarCuenta generated by hbm2java
 */
public class ZarCuenta implements java.io.Serializable {

	private Integer id;
	private String email;
	private String password;
	private Date fechaDeRegistro;
	private int idRol;
	private int idDatosPersonales;

	public ZarCuenta() {
	}

	public ZarCuenta(String email, String password, Date fechaDeRegistro,
			int idRol, int idDatosPersonales) {
		this.email = email;
		this.password = password;
		this.fechaDeRegistro = fechaDeRegistro;
		this.idRol = idRol;
		this.idDatosPersonales = idDatosPersonales;
	}

	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Date getFechaDeRegistro() {
		return this.fechaDeRegistro;
	}

	public void setFechaDeRegistro(Date fechaDeRegistro) {
		this.fechaDeRegistro = fechaDeRegistro;
	}

	public int getIdRol() {
		return this.idRol;
	}

	public void setIdRol(int idRol) {
		this.idRol = idRol;
	}

	public int getIdDatosPersonales() {
		return this.idDatosPersonales;
	}

	public void setIdDatosPersonales(int idDatosPersonales) {
		this.idDatosPersonales = idDatosPersonales;
	}
	public static void GuardarZarCuenta(HttpSession s){
		Session sesion = HibernateUtil.getSessionFactory().openSession();
		Transaction tx = null;
        
		String foto= (String)s.getAttribute("foto");
        String nombre1= (String)s.getAttribute("nombre1");
		String nombre2 = (String)s.getAttribute("nombre2");
		String apellido1= (String)s.getAttribute("apellido1");
		String apellido2= (String)s.getAttribute("apellido2");
		String sexo = (String)s.getAttribute("sexo");
		String ecivil= (String)s.getAttribute("ecivil");
		String cedula= (String)s.getAttribute("cedula");
		String email2= (String)s.getAttribute("email1");
		String dia= (String)s.getAttribute("dia");
		String mes= (String)s.getAttribute("mes");
		String ano= (String)s.getAttribute("ano");
		String nacionalidad = (String)s.getAttribute("nacionalidad");
		String cresidencia= (String)s.getAttribute("cresidencia");
		String direccion= (String)s.getAttribute("direccion");
		String discapacidad= (String)s.getAttribute("discapacidad");
		String tipodiscapacidad= (String)s.getAttribute("tipodiscapacidad");
		String telefono= (String)s.getAttribute("telefono");
		String celular= (String)s.getAttribute("celular");
		String operadora= (String)s.getAttribute("operadora");
		String movilizacion= (String)s.getAttribute("movilizacion");
		String licencia= (String)s.getAttribute("licencia");
		String tlicencia= (String)s.getAttribute("tlicencia");
		String salario= (String)s.getAttribute("salario");
		String aspiracion= (String)s.getAttribute("aspiracion");
		
		
		boolean sexoR=false;
		if(sexo.equals("M"))
			sexoR=true;
		
		Date fnacimiento=new Date();
		fnacimiento.setDate(Integer.parseInt(dia));
		fnacimiento.setMonth(Integer.parseInt(mes)-1);
		fnacimiento.setYear(Integer.parseInt(ano)-1900);
		
		Boolean discapacidadR=false;
		if(discapacidad!=null){
			if(discapacidad.equals("Y"))
				discapacidadR=true;
		}else
			discapacidadR=null;
		
		Boolean movilizacionR=false;
		if(movilizacion!=null){
			if(movilizacion.equals("Y"))
				movilizacionR=true;
		}else
			movilizacionR=null;
		
		Boolean licenciaR=false;
		if(licencia!=null){
			if(licencia.equals("Y"))
				licenciaR=true;
		}else
			licenciaR=null;
		
		Float aspiracionR=null;
		Float salarioR=null;
		try{
			aspiracionR=Float.parseFloat(aspiracion);	
		}catch(NumberFormatException e){
			
		}	
		try{
			salarioR=Float.parseFloat(salario);			
		}catch(NumberFormatException e){
			
		}	
		
		Session session =HibernateUtil.getSessionFactory().openSession();
        Criteria c_zarDPEC=session.createCriteria(ZarDatosPersonalesEstadoCivil.class);
        Criteria c_zarDPCR=session.createCriteria(ZarDatosPersonalesCiudadResidencia.class);
        Criteria c_zarDPTD=session.createCriteria(ZarDatosPersonalesTipoDiscapacidad.class);
        Criteria c_zarDPTL=session.createCriteria(ZarDatosPersonalesTipoLicencia.class);
        Criteria c_zarDPTCO=session.createCriteria(ZarDatosPersonalesTelefonoCelularOperadora.class);
        Criteria c_zarDP=session.createCriteria(ZarDatosPersonales.class);
        
        ZarDatosPersonales nuevoDatosPersonales=new ZarDatosPersonales(foto, 
				 nombre1,
				 nombre2,  apellido1,
				 apellido2, sexoR,  cedula,  email2,
				fnacimiento,  nacionalidad,
				 direccion, discapacidadR,
				 telefono, movilizacionR,licenciaR,
				salarioR, aspiracionR, ZarDatosPersonalesEstadoCivil.obtenerId(ecivil, c_zarDPEC.list()),
				ZarDatosPersonalesCiudadResidencia.obtenerId(cresidencia, c_zarDPCR.list()), ZarDatosPersonalesTipoDiscapacidad.obtenerId(tipodiscapacidad, c_zarDPTD.list()),
				ZarDatosPersonalesTipoLicencia.obtenerId(tlicencia, c_zarDPTL.list()));
		
        try {
            tx = sesion.beginTransaction();
            sesion.saveOrUpdate(nuevoDatosPersonales);
            tx.commit();
        } catch (Exception e) {
            tx.rollback();
        }
   
        String email = (String)s.getAttribute("email");
		String password = (String)s.getAttribute("pass");		
		
        Date fecha=new Date();
        ZarCuenta nuevaZarCuenta=new ZarCuenta(email,password,fecha,1,ZarDatosPersonales.obtenerId(cedula, c_zarDP.list()));
        
        try {
            tx = sesion.beginTransaction();
            sesion.saveOrUpdate(nuevaZarCuenta);
            tx.commit();
        } catch (Exception e) {
            tx.rollback();
        }
        
		ZarDatosPersonalesTelefonoCelular nuevoTelefonoCelular=new ZarDatosPersonalesTelefonoCelular(celular,
				ZarDatosPersonalesTelefonoCelularOperadora.obtenerId(operadora, c_zarDPTCO.list()),
				ZarDatosPersonales.obtenerId(cedula, c_zarDP.list()));
		
		try {
            tx = sesion.beginTransaction();
            sesion.saveOrUpdate(nuevoTelefonoCelular);
            tx.commit();
        } catch (Exception e) {
            tx.rollback();
        }
		
		String titulo= (String)s.getAttribute("titulo");
		String pais = (String)s.getAttribute("pais");
		String institucion= (String)s.getAttribute("institucion");
		String nivel= (String)s.getAttribute("nivel");
		String estado= (String)s.getAttribute("estado");
		String promedio= (String)s.getAttribute("promedio");
		String rango= (String)s.getAttribute("rango");
		String materias= (String)s.getAttribute("materias");
		String cantidad= (String)s.getAttribute("cantidad");
		String logro= (String)s.getAttribute("logro");
		String dia1= (String)s.getAttribute("dia1");
		String mes1= (String)s.getAttribute("mes1");
		String ano1= (String)s.getAttribute("ano1");
		String dia2= (String)s.getAttribute("dia2");
		String mes2= (String)s.getAttribute("mes2");
		String ano2= (String)s.getAttribute("ano2");
		
		Criteria c_zarIAI=session.createCriteria(ZarInformacionAcademicaInstitucion.class);
		Criteria c_zarIANE=session.createCriteria(ZarInformacionAcademicaNivelEstudio.class);
		Criteria c_zarIAE=session.createCriteria(ZarInformacionAcademicaEstado.class);
		Criteria c_zarC=session.createCriteria(ZarCuenta.class);
		
		Date finicioR=new Date();
		finicioR.setDate(Integer.parseInt(dia1));
		finicioR.setMonth(Integer.parseInt(mes1)-1);
		finicioR.setYear(Integer.parseInt(ano1)-1900);
		
		Date ffinR=new Date();
		try{
			ffinR.setDate(Integer.parseInt(dia2));
			ffinR.setMonth(Integer.parseInt(mes2)-1);
			ffinR.setYear(Integer.parseInt(ano2)-1900);
		}catch(NumberFormatException e){
			ffinR=null;
		}	
		
		Integer materiasR=null;
		Integer cantidadR=null;
		try{
			materiasR=Integer.parseInt(materias);		
		}catch(NumberFormatException e){
			
		}	
		try{
			cantidadR=Integer.parseInt(cantidad);	
		}catch(NumberFormatException e){
			
		}	
				
		ZarInformacionAcademica informacionAcademica=new ZarInformacionAcademica(titulo,  pais,
				finicioR,ffinR,promedio,
				rango, materiasR, cantidadR,
				logro, ZarInformacionAcademicaInstitucion.obtenerId(institucion, c_zarIAI.list()), 
				ZarInformacionAcademicaNivelEstudio.obtenerId(nivel, c_zarIANE.list()),
				ZarInformacionAcademicaEstado.obtenerId(estado, c_zarIAE.list()),ZarCuenta.obtenerId(email, c_zarC.list()));
		
		try {
            tx = sesion.beginTransaction();
            sesion.saveOrUpdate(informacionAcademica);
            tx.commit();
        } catch (Exception e) {
            tx.rollback();
        }
		
		String empresa= (String)s.getAttribute("empresa");
		String area = (String)s.getAttribute("area");
		String cargo= (String)s.getAttribute("cargo");
		String sector= (String)s.getAttribute("sector");
		String descripcion= (String)s.getAttribute("descripcion");
		String logros= (String)s.getAttribute("logros");
		String dia3= (String)s.getAttribute("dia3");
		String mes3= (String)s.getAttribute("mes3");
		String ano3= (String)s.getAttribute("ano3");
		String dia4= (String)s.getAttribute("dia4");
		String mes4= (String)s.getAttribute("mes4");
		String ano4= (String)s.getAttribute("ano4");
		
		Criteria c_zarELA=session.createCriteria(ZarExperienciaLaboralArea.class);
		Criteria c_zarELS=session.createCriteria(ZarExperienciaLaboralSector.class);
		
		Date fechaInicioR=new Date();
		fechaInicioR.setDate(Integer.parseInt(dia3));
		fechaInicioR.setMonth(Integer.parseInt(mes3)-1);
		fechaInicioR.setYear(Integer.parseInt(ano3)-1900);
		
		Date fechaSalidaR=new Date();
		try{
			fechaSalidaR.setDate(Integer.parseInt(dia4));
			fechaSalidaR.setMonth(Integer.parseInt(mes4)-1);
			fechaSalidaR.setYear(Integer.parseInt(ano4)-1900);
		}catch(NumberFormatException e){
			fechaSalidaR=null;
		}			
		
		ZarExperienciaLaboral nuevaexperiencia=new ZarExperienciaLaboral(empresa, cargo,
				fechaInicioR, fechaSalidaR, descripcion,
				logros, ZarExperienciaLaboralArea.obtenerId(area, c_zarELA.list()), 
				ZarExperienciaLaboralSector.obtenerId(sector, c_zarELS.list()), 
				ZarCuenta.obtenerId(email, c_zarC.list()));
		
		try {
            tx = sesion.beginTransaction();
            sesion.saveOrUpdate(nuevaexperiencia);
            tx.commit();
        } catch (Exception e) {
            tx.rollback();
        }
		
		String idioma= (String)s.getAttribute("idioma");
		String escrito = (String)s.getAttribute("escrito");
		String oral= (String)s.getAttribute("oral");
		String lectura= (String)s.getAttribute("lectura");
		
		Criteria c_zarIN=session.createCriteria(ZarIdiomaNombre.class);
		
		ZarIdioma nuevoIdioma=new ZarIdioma( escrito,  oral,  lectura,ZarIdiomaNombre.obtenerId(idioma, c_zarIN.list()),
				ZarCuenta.obtenerId(email, c_zarC.list()));
		
		try {
            tx = sesion.beginTransaction();
            sesion.saveOrUpdate(nuevoIdioma);
            tx.commit();
        } catch (Exception e) {
            tx.rollback();
        }
		
		String conocimiento= (String)s.getAttribute("conocimiento");
		String nivel2 = (String)s.getAttribute("nivel2");
		
		Criteria c_zarIC=session.createCriteria(ZarInformaticaConocimiento.class);
		
		ZarInformatica nuevoInformatica=new ZarInformatica(nivel, ZarInformaticaConocimiento.obtenerId(conocimiento, c_zarIC.list()),
				ZarCuenta.obtenerId(email, c_zarC.list()));
		
		try {
            tx = sesion.beginTransaction();
            sesion.saveOrUpdate(nuevoInformatica);
            tx.commit();
        } catch (Exception e) {
            tx.rollback();
        }
		
		String nconocimiento= (String)s.getAttribute("nconocimiento");
		String descripcion2 = (String)s.getAttribute("descripcion2");
		
		ZarConocimiento nuevoConocimiento=new ZarConocimiento(nconocimiento, descripcion2,
				ZarCuenta.obtenerId(email, c_zarC.list()));
		
		try {
            tx = sesion.beginTransaction();
            sesion.saveOrUpdate(nuevoConocimiento);
            tx.commit();
        } catch (Exception e) {
            tx.rollback();
        }
		
		String nombre= (String)s.getAttribute("nombre");
		String relacion = (String)s.getAttribute("relacion");
		String empresa2= (String)s.getAttribute("empresaR");
		String cargo2= (String)s.getAttribute("cargo2");
		String telefono2= (String)s.getAttribute("telefono2");
		String celular2= (String)s.getAttribute("celular2");
		String comentario= (String)s.getAttribute("comentario");
		
		Criteria c_zarRR=session.createCriteria(ZarReferenciaRelacion.class);
		
		ZarReferencia nuevaReferencia=new ZarReferencia( nombre, empresa2
				,cargo2,telefono2,celular2,comentario,
				ZarReferenciaRelacion.obtenerId(relacion, c_zarRR.list()),
				ZarCuenta.obtenerId(email, c_zarC.list()));

         try {
             tx = sesion.beginTransaction();
             sesion.saveOrUpdate(nuevaReferencia);
             tx.commit();
         } catch (Exception e) {
             tx.rollback();
         }finally {
        	 sesion.close();
         }
	}
	
	public static void guardarPerfilRequestDP(String email_user,List c_zarC ,List c_zarDP ,List c_zarDPCR ,List c_zarDPEC ,List c_zarDPTC ,	List c_zarDPTCO ,	List c_zarDPTD ,List c_zarDPTL ,HttpServletRequest request,
			List c_zarIA,List c_zarIAE,List c_zarIAI,List c_zarIAN,
			List c_zarEL,List c_zarELA,List c_zarELS,
			List c_zarID,List c_zarIDN,
			List c_zarIN,List c_zarINC,
			List c_zarCONO,
			List c_zarR,List c_zarRR){
		
		int idCuenta=0;
		
		Map<String,String> m_perfilDP=new HashMap<String,String>();
		
		for(int i=0; i<c_zarC.size(); i++)
        {
			ZarCuenta z=(ZarCuenta)c_zarC.get(i);
			if (z.getEmail().equals(email_user)){
				idCuenta=z.getId();
				for(int j=0; j<c_zarDP.size(); j++)
		        {
					ZarDatosPersonales zdp=(ZarDatosPersonales)c_zarDP.get(j);
					if(zdp.getId()==z.getIdDatosPersonales()){
						String sexo,estadoCivil="",discapacidad="",ciudad="",tipoDisca="",celular="",movilizacion="",licencia="",
								tipoLicencia="",nombre2="",apellido2="",direccion="",telefono="",salario="",aspiracion="";
												
						if(zdp.getDiscapacidad()!=null)
							discapacidad=z.obtenerDiscapacidad(zdp.getDiscapacidad());
						if(zdp.getMovilizacionPropia()!=null)
							movilizacion=z.obtenerMovilizacion(zdp.getMovilizacionPropia());
						if(zdp.getLicencia()!=null)
							licencia=z.obtenerLicencia(zdp.getLicencia());
						if(zdp.getIdTipoDiscapacidad()!=null)							
							tipoDisca=z.obtenerTipoDiscapacidad(c_zarDPTD, zdp.getIdTipoDiscapacidad());
						if(zdp.getIdTipoLicencia()!=null)
							tipoLicencia=z.obtenerTipoLicencia(c_zarDPTL, zdp.getIdTipoLicencia());
						if(zdp.getSegundoNombre()!=null)
							nombre2=zdp.getSegundoNombre();
						if(zdp.getApellidoMaterno()!=null)
							apellido2=zdp.getApellidoMaterno();
						if(zdp.getDireccionDomicilio()!=null)
							direccion=zdp.getDireccionDomicilio();
						if(zdp.getTelefonoFijo()!=null)
							telefono=zdp.getTelefonoFijo();
						if(zdp.getSalarioActual()!=null)
							salario=String.valueOf(zdp.getSalarioActual());
						if(zdp.getAspiracionSalarial()!=null)
							aspiracion=String.valueOf(zdp.getAspiracionSalarial());
						
						sexo=z.obtenerSexo(zdp.isSexo());
						estadoCivil=z.obtenerEstadoCivil(c_zarDPEC, zdp.getIdEstadoCivil());
						ciudad=z.obtenerCiudadResidencia(c_zarDPCR, zdp.getIdCiudadResidencia());	
						celular=z.obtenerCelulares(c_zarDPTC, c_zarDPTCO, zdp.getId());
						
												
						m_perfilDP.put("Nombre Completo",zdp.getPrimerNombre()+" "+nombre2+" "+zdp.getApellidoPaterno()+" "+apellido2);
						m_perfilDP.put("Sexo",sexo);
						m_perfilDP.put("Estado Civil",estadoCivil);
						m_perfilDP.put("Cedula de Identidad",zdp.getCedula());
						m_perfilDP.put("Correo electronico",zdp.getEmail());
						m_perfilDP.put("Fecha de Nacimiento",zdp.getFechaDeNacimiento().toString());
						m_perfilDP.put("Nacionalidad",zdp.getNacionalidad());
						m_perfilDP.put("Ciudad de residencia",ciudad);
						m_perfilDP.put("Direccion de domicilio",direccion);
						m_perfilDP.put("Discapacidad",discapacidad+" Tipo: "+tipoDisca);
						m_perfilDP.put("Telefono Fijo",telefono);
						m_perfilDP.put("Telefono Celular",celular);
						m_perfilDP.put("Movilizacion propia",movilizacion);
						m_perfilDP.put("Licencia",licencia+" Tipo: "+tipoLicencia);
						m_perfilDP.put("Salario Actual",salario+" Aspiracion Salarial: "+aspiracion);
					}
		        }
			}
        }
		
        request.setAttribute("datosP", m_perfilDP);
        
        
        Map<String,String> m_perfilIA=new HashMap<String,String>();		
		
		for(int j=0; j<c_zarIA.size(); j++)
        {
			ZarInformacionAcademica zia=(ZarInformacionAcademica)c_zarIA.get(j);
			if(zia.getIdCuenta()==idCuenta){
				String pais="",fechafin="",promedio="",rango="",materias="",cantidadm="",observacion="",
						institucion="",nivel="",estado="";
				
				if(zia.getPais()!=null)
					pais=zia.getPais();
				if(zia.getFechaFinalizacion()!=null)
					fechafin=zia.getFechaFinalizacion().toString();
				if(zia.getPromedio()!=null)
					promedio=zia.getPromedio();
				if(zia.getRango()!=null)
					rango=zia.getRango();
				if(zia.getMateriasAprobadas()!=null)
					materias=String.valueOf(zia.getMateriasAprobadas());
				if(zia.getCantidadMaterias()!=null)
					cantidadm=String.valueOf(zia.getCantidadMaterias());
				if(zia.getObservacion()!=null)
					observacion=zia.getObservacion();
				
				m_perfilIA.put("Titulo Obtenido",zia.getTituloObtenido());
				m_perfilIA.put("Pais",pais);
				m_perfilIA.put("Fecha Inicio",zia.getFechaInicio().toString()+" Fecha Finalizacion: "+fechafin);
				m_perfilIA.put("Promedio",promedio+" Rango: "+rango);
				m_perfilIA.put("Materias aprobadas",materias+" Cantidad de materias: "+cantidadm);
				m_perfilIA.put("Observacion",observacion);
				m_perfilIA.put("Institucion",ZarInformacionAcademicaInstitucion.obtenerNombre(zia.getIdInstitucion(), c_zarIAI));
				m_perfilIA.put("Nivel",ZarInformacionAcademicaNivelEstudio.obtenerNombre(zia.getIdNivelEstudio(),c_zarIAN)+" Estado: "+ZarInformacionAcademicaEstado.obtenerNombre(zia.getIdEstado(), c_zarIAE));
			}
        }	
		
        request.setAttribute("informacionA", m_perfilIA);
        
        
        Map<String,String> m_perfilEL=new HashMap<String,String>();		
		
		for(int j=0; j<c_zarEL.size(); j++)
        {
			ZarExperienciaLaboral zel=(ZarExperienciaLaboral)c_zarEL.get(j);
			if(zel.getIdCuenta()==idCuenta){
				String fechasalida="",descripcion="",logros="";
				
				if(zel.getFechaSalida()!=null)
					fechasalida=zel.getFechaSalida().toString();
				if(zel.getDescripcionFuncion()!=null)
					descripcion=zel.getDescripcionFuncion();
				if(zel.getLogros()!=null)
					logros=zel.getLogros();
				
				m_perfilEL.put("Nombre de Empresa",zel.getNombreEmpresa());
				m_perfilEL.put("Cargo",zel.getCargo());
				m_perfilEL.put("Fecha Inicio",zel.getFechaInicio().toString()+" Fecha Salida: "+fechasalida);
				m_perfilEL.put("Descripcion de funciones",descripcion);
				m_perfilEL.put("Logros",logros);
				m_perfilEL.put("Area",ZarExperienciaLaboralArea.obtenerNombre(zel.getIdArea(), c_zarELA));
				m_perfilEL.put("Sector",ZarExperienciaLaboralSector.obtenerNombre(zel.getIdSector(), c_zarELS));
			}
        }	
		
        request.setAttribute("experiencia", m_perfilEL);
        
        
        Map<String,String> m_perfilID=new HashMap<String,String>();		
		
		for(int j=0; j<c_zarID.size(); j++)
        {
			ZarIdioma zid=(ZarIdioma)c_zarID.get(j);
			if(zid.getIdCuenta()==idCuenta){
								
				m_perfilID.put("a.-Nombre del idioma",ZarIdiomaNombre.obtenerNombre(zid.getIdNombre(), c_zarIDN));
				m_perfilID.put("b.-Escrito",zid.getEscrito());
				m_perfilID.put("c.-Oral",zid.getOral());
				m_perfilID.put("d.-Lectura",zid.getLectura());
			}
        }	
		
        request.setAttribute("idioma", m_perfilID);
        
        
        
        Map<String,String> m_perfilIN=new HashMap<String,String>();		
		
		for(int j=0; j<c_zarIN.size(); j++)
        {
			ZarInformatica zin=(ZarInformatica)c_zarIN.get(j);
			if(zin.getIdCuenta()==idCuenta){
								
				m_perfilIN.put("Nombre del conocimiento",ZarInformaticaConocimiento.obtenerNombre(zin.getIdConocimientoInformatico(), c_zarINC));
				m_perfilIN.put("Nivel",zin.getNivel());
			}
        }	
		
        request.setAttribute("informatica", m_perfilIN);
        
        
        Map<String,String> m_perfilCONO=new HashMap<String,String>();		
		
		for(int j=0; j<c_zarCONO.size(); j++)
        {
			ZarConocimiento zcono=(ZarConocimiento)c_zarCONO.get(j);
			if(zcono.getIdCuenta()==idCuenta){
				
				String descripcion="";
				
				if(zcono.getDescripcion()!=null)
					descripcion=zcono.getDescripcion();
								
				m_perfilCONO.put("Nombre del conocimiento",zcono.getNombreConocimiento());
				m_perfilCONO.put("Descripcion",descripcion);
			}
        }	
		
        request.setAttribute("conocimiento", m_perfilCONO);
        
        
        Map<String,String> m_perfilRE=new HashMap<String,String>();		
		
		for(int j=0; j<c_zarR.size(); j++)
        {
			ZarReferencia zre=(ZarReferencia)c_zarR.get(j);
			if(zre.getIdCuenta()==idCuenta){
				
				String telefono="",celular="",comentario="";
				
				if(zre.getTelefonoFijo()!=null)
					telefono=zre.getTelefonoFijo();
				if(zre.getTelefonoCelular()!=null)
					celular=zre.getTelefonoCelular();
				if(zre.getComentario()!=null)
					comentario=zre.getComentario();
								
				m_perfilRE.put("Nombre",zre.getNombre()+" Relacion: "+ZarReferenciaRelacion.obtenerNombre(zre.getIdRelacion(), c_zarRR));
				m_perfilRE.put("Empresa",zre.getNombreEmpresa());
				m_perfilRE.put("Cargo",zre.getCargo());
				m_perfilRE.put("Telefono fijo",telefono);
				m_perfilRE.put("Telefono movil",celular);
				m_perfilRE.put("Comentario",comentario);
			}
        }	
		
        request.setAttribute("referencia", m_perfilRE);
        
        
	}
	
public static void guardarTodosRequestDP(List c_zarC ,List c_zarDP ,List c_zarDPCR ,List c_zarDPEC ,List c_zarDPTC ,	List c_zarDPTCO ,	List c_zarDPTD ,List c_zarDPTL ,HttpServletRequest request){
		
		Map<Integer,List<String>> m_perfil=new HashMap<Integer,List<String>>();
		
		for(int i=0; i<c_zarC.size(); i++)
        {
			ZarCuenta z=(ZarCuenta)c_zarC.get(i);			
				
			for(int j=0; j<c_zarDP.size(); j++)
	        {
				ZarDatosPersonales zdp=(ZarDatosPersonales)c_zarDP.get(j);
				if(zdp.getId()==z.getIdDatosPersonales()){ 
					String sexo,estadoCivil="",discapacidad="",ciudad="",tipoDisca="",celular="",movilizacion="",licencia="",tipoLicencia="";
					
					sexo=z.obtenerSexo(zdp.isSexo());
					discapacidad=z.obtenerDiscapacidad(zdp.getDiscapacidad());
					estadoCivil=z.obtenerEstadoCivil(c_zarDPEC, zdp.getIdEstadoCivil());
					ciudad=z.obtenerCiudadResidencia(c_zarDPCR, zdp.getIdCiudadResidencia());					
					tipoDisca=z.obtenerTipoDiscapacidad(c_zarDPTD, zdp.getIdTipoDiscapacidad());
					celular=z.obtenerCelulares(c_zarDPTC, c_zarDPTCO, zdp.getId());
					movilizacion=z.obtenerMovilizacion(zdp.getMovilizacionPropia());
					licencia=z.obtenerLicencia(zdp.getLicencia());
					tipoLicencia=z.obtenerTipoLicencia(c_zarDPTL, zdp.getIdTipoLicencia());
											
					List<String> l=new ArrayList<String>();
					l.add(zdp.getPrimerNombre()+" "+zdp.getSegundoNombre()+" "+zdp.getApellidoPaterno()+" "+zdp.getApellidoMaterno());
					l.add(sexo);
					l.add(estadoCivil);
					l.add(zdp.getCedula());
					l.add(zdp.getEmail());
					l.add(zdp.getFechaDeNacimiento().toString());
					l.add(zdp.getNacionalidad());
					l.add(ciudad);
					l.add(zdp.getDireccionDomicilio());
					l.add(discapacidad+" "+tipoDisca);
					l.add(zdp.getTelefonoFijo());
					l.add(celular);
					l.add(movilizacion);
					l.add(licencia);
					l.add(tipoLicencia);
					l.add(String.valueOf(zdp.getSalarioActual()));
					l.add(String.valueOf(zdp.getAspiracionSalarial()));
					m_perfil.put(i, l);
					
				}
	        }
			
        }
		
        request.setAttribute("datosPersonales", m_perfil);
	}
	
	public String obtenerSexo(boolean man){
		if (man)
			return "Masculino";
		else
			return "Femenino";
	}
	
	public String obtenerDiscapacidad(boolean si){
		if (si)
			return "Si";
		else
			return "No";
	}
	
	public String obtenerMovilizacion(boolean si){
		if (si)
			return "Si";
		else
			return "No";
	}
	
	public String obtenerLicencia(boolean si){
		if (si)
			return "Si";
		else
			return "No";
	}
	
	public String obtenerEstadoCivil(List lista,int id){
		for(int k=0; k<lista.size(); k++)
        {
			ZarDatosPersonalesEstadoCivil zdpec=(ZarDatosPersonalesEstadoCivil)lista.get(k);
			if(id==zdpec.getId())
				return zdpec.getEstadoCivil();
        }
		return "No encontrado";
	}
	
	public String obtenerCiudadResidencia(List lista,int id){
		for(int k=0; k<lista.size(); k++)
        {
			ZarDatosPersonalesCiudadResidencia zdpcr=(ZarDatosPersonalesCiudadResidencia)lista.get(k);
			if(id==zdpcr.getId())
				return zdpcr.getNombreCiudad();
        }
		return "No encontrado";
	}
	
	public String obtenerTipoDiscapacidad(List lista,int id){
		for(int k=0; k<lista.size(); k++)
        {
			ZarDatosPersonalesTipoDiscapacidad zdptd=(ZarDatosPersonalesTipoDiscapacidad)lista.get(k);
			if(id==zdptd.getId())
				return zdptd.getTipo();
        }
		return "No encuentrado";
	}
	
	public String obtenerCelulares(List listaCelular,List listaOperadora,int id){
		String celular="";
		for(int k=0; k<listaCelular.size(); k++)
        {
			ZarDatosPersonalesTelefonoCelular zdptc=(ZarDatosPersonalesTelefonoCelular)listaCelular.get(k);
			if(id==zdptc.getIdDatosPersonales()){				
				for(int l=0; l<listaOperadora.size(); l++)
		        {
					ZarDatosPersonalesTelefonoCelularOperadora zdptco=(ZarDatosPersonalesTelefonoCelularOperadora)listaOperadora.get(l);
					if(zdptc.getIdOperadora()==zdptco.getId())
						celular=celular+zdptco.getNombreOperadora()+" ";
		        }
				celular=celular+zdptc.getNumero()+" ";
			}
        }
		return celular;
	}
	
	public String obtenerTipoLicencia(List lista,int id){
		for(int k=0; k<lista.size(); k++)
        {
			ZarDatosPersonalesTipoLicencia zdptl=(ZarDatosPersonalesTipoLicencia)lista.get(k);
			if(id==zdptl.getId())
				return zdptl.getTipo();
        }
		return "No encuentrado";
	}
	
	public static int obtenerId(String email,List lista){
		
		for(int k=0; k<lista.size(); k++)
        {
			ZarCuenta zdpcr=(ZarCuenta)lista.get(k);
			if(email.equals(zdpcr.getEmail()))
				return zdpcr.getId();
        }
		return 0;
	}
	
	public static int obtenerIdxidDP(int idDP,List lista){
		
		for(int k=0; k<lista.size(); k++)
        {
			ZarCuenta zdpcr=(ZarCuenta)lista.get(k);
			if(idDP==zdpcr.getIdDatosPersonales())
				return zdpcr.getId();
        }
		return 0;
	}
	
	public static void GuardarResultadoBusqueda(HttpServletRequest r,String sexo,String ecivil,String cresidencia,String discapacidad,
			String tipodiscapacidad,String licencia,String tlicencia,String institucion,String nivel,String estado,
			String area,String sector,String idioma,String conocimiento,List lDP,List lDPCR,List lDPEC,List lDPTD,List lDPTL,
			List lIAI,List lIANE,List lIAE,List lIA,List lC,List lEL,List lELA,List lELS,List lIDI,List lIDIN,List lINF,List lINFC){
		
		Map<Integer,List<String>> aspirantes=new HashMap<Integer,List<String>>();
		List<ZarDatosPersonales> ltmp=new ArrayList<ZarDatosPersonales>();
		String sexotmp;
		
		System.out.println("En zarCuenta: "+ sexo+" "+ ecivil+" "+ cresidencia+" "+ discapacidad+" "+
				tipodiscapacidad+" "+ licencia+" "+ tlicencia+" "+ institucion+" "+ nivel+" "+ estado+" "+
				area+" "+ sector+" "+ idioma+" "+ conocimiento);
		
		if(!sexo.equals("NG")){
			for(int i=0; i<lDP.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)lDP.get(i);
				if (z.isSexo())
					sexotmp= "M";
				else
					sexotmp= "F";
				
				if(sexo.equals(sexotmp))
					ltmp.add(z);
	        }
		}else{
			for(int i=0; i<lDP.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)lDP.get(i);
				ltmp.add(z);
	        }
		}
		
		if(!ecivil.equals("Indistinto")){
			int idEC=ZarDatosPersonalesEstadoCivil.obtenerId(ecivil, lDPEC);
			
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				if(z.getIdEstadoCivil()!=idEC)
					ltmp.remove(i);
	        }
		}
		if(!cresidencia.equals("Indistinto")){
			int idCR=ZarDatosPersonalesCiudadResidencia.obtenerId(cresidencia, lDPCR);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				if(z.getIdCiudadResidencia()!=idCR)
					ltmp.remove(i);
	        }
		}
		if(!discapacidad.equals("NG")){
			String discatmp;
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				try{
					if(z.getDiscapacidad())
						discatmp="Y";
					else
						discatmp="N";
					if(!discapacidad.equals(discatmp))
						ltmp.remove(i);
				}catch (Exception e) {
					
				}
				
	        }
		}
		if(!tipodiscapacidad.equals("Indistinto")){
			int idTD=ZarDatosPersonalesTipoDiscapacidad.obtenerId(tipodiscapacidad, lDPTD);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				if(z.getIdTipoDiscapacidad()!=idTD)
					ltmp.remove(i);
	        }
		}
		if(!licencia.equals("NG")){
			String licetmp;
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				try{
					if(z.getLicencia())
						licetmp="Y";
					else
						licetmp="N";
					if(!licencia.equals(licetmp))
						ltmp.remove(i);
				}catch (Exception e) {
					
				}
				
	        }
		}
		if(!tlicencia.equals("Indistinto")){
			int idTL=ZarDatosPersonalesTipoLicencia.obtenerId(tlicencia, lDPTL);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				if(z.getIdTipoLicencia()!=idTL)
					ltmp.remove(i);
	        }
		}
		if(!institucion.equals("Indistinto")){
			int idINST=ZarInformacionAcademicaInstitucion.obtenerId(institucion, lIAI);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				int idC=ZarCuenta.obtenerIdxidDP(z.getId(), lC);
				for(int j=0; j<lIA.size(); j++)
		        {
					ZarInformacionAcademica zi=(ZarInformacionAcademica)lIA.get(j);
					if(zi.getIdCuenta()==idC){
						if(zi.getIdInstitucion()!=idINST)
							ltmp.remove(i);
					}
		        }
				
	        }
		}
		if(!estado.equals("Indistinto")){
			int idEST=ZarInformacionAcademicaEstado.obtenerId(estado, lIAE);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				int idC=ZarCuenta.obtenerIdxidDP(z.getId(), lC);
				for(int j=0; j<lIA.size(); j++)
		        {
					ZarInformacionAcademica zi=(ZarInformacionAcademica)lIA.get(j);
					if(zi.getIdCuenta()==idC){
						if(zi.getIdEstado()!=idEST)
							ltmp.remove(i);
					}
		        }
				
	        }
		}
		if(!nivel.equals("Indistinto")){
			int idNIV=ZarInformacionAcademicaNivelEstudio.obtenerId(nivel, lIANE);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				int idC=ZarCuenta.obtenerIdxidDP(z.getId(), lC);
				for(int j=0; j<lIA.size(); j++)
		        {
					ZarInformacionAcademica zi=(ZarInformacionAcademica)lIA.get(j);
					if(zi.getIdCuenta()==idC){
						if(zi.getIdNivelEstudio()!=idNIV)
							ltmp.remove(i);
					}
		        }
				
	        }
		}
		if(!area.equals("Indistinto")){
			int idARE=ZarExperienciaLaboralArea.obtenerId(area, lELA);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				int idC=ZarCuenta.obtenerIdxidDP(z.getId(), lC);
				for(int j=0; j<lEL.size(); j++)
		        {
					ZarExperienciaLaboral ze=(ZarExperienciaLaboral)lEL.get(j);
					if(ze.getIdCuenta()==idC){
						if(ze.getIdArea()!=idARE)
							ltmp.remove(i);
					}
		        }
				
	        }
		}
		if(!sector.equals("Indistinto")){
			int idSEC=ZarExperienciaLaboralSector.obtenerId(sector, lELS);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				int idC=ZarCuenta.obtenerIdxidDP(z.getId(), lC);
				for(int j=0; j<lEL.size(); j++)
		        {
					ZarExperienciaLaboral ze=(ZarExperienciaLaboral)lEL.get(j);
					if(ze.getIdCuenta()==idC){
						if(ze.getIdSector()!=idSEC)
							ltmp.remove(i);
					}
		        }
				
	        }
		}
		
		//AQUI PUEDE HABER PROBLEMAS CUANDO TIENE MAS DE UN IDIOMA!!!
		if(!idioma.equals("Indistinto")){
			int idIDI=ZarIdiomaNombre.obtenerId(idioma, lIDIN);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				int idC=ZarCuenta.obtenerIdxidDP(z.getId(), lC);
				for(int j=0; j<lIDI.size(); j++)
		        {
					ZarIdioma zi=(ZarIdioma)lIDI.get(j);
					if(zi.getIdCuenta()==idC){
						if(zi.getIdNombre()!=idIDI)
							ltmp.remove(i);
					}
		        }
				
	        }
		}
		//AQUI PUEDE HABER PROBLEMAS CUANDO TIENE MAS DE UN CONOCIMIENTO INFORMATICO!!!
		if(!conocimiento.equals("Indistinto")){
			int idINF=ZarInformaticaConocimiento.obtenerId(conocimiento, lINFC);
			for(int i=0; i<ltmp.size(); i++)
	        {
				ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
				int idC=ZarCuenta.obtenerIdxidDP(z.getId(), lC);
				for(int j=0; j<lINF.size(); j++)
		        {
					ZarInformatica zi=(ZarInformatica)lINF.get(j);
					if(zi.getIdCuenta()==idC){
						if(zi.getIdConocimientoInformatico()!=idINF)
							ltmp.remove(i);
					}
		        }
				
	        }
		}
		
		for(int i=0; i<ltmp.size(); i++)
        {
			ZarDatosPersonales z=(ZarDatosPersonales)ltmp.get(i);
			System.out.println(z.getPrimerNombre());
			List l=new ArrayList();
			l.add(z.getPrimerNombre());
			l.add(z.getApellidoPaterno());
			l.add(z.getApellidoMaterno());
			aspirantes.put(i, l);
        }
		
		r.setAttribute("aspirantes", aspirantes);
		
	}
	
	public static boolean existeCorreo(String correo){
		
		Session session =HibernateUtil.getSessionFactory().openSession();
		List lzarC=session.createCriteria(ZarCuenta.class).list();
		
		for(int i=0; i<lzarC.size(); i++)
        {
			ZarCuenta z=(ZarCuenta)lzarC.get(i);
			if(z.getEmail().equals(correo))
				return true;
        }
		return false;
	}
	
	public static String obtenerNombrexCorreo(String correo){
		
		Session session =HibernateUtil.getSessionFactory().openSession();
		List lzarC=session.createCriteria(ZarCuenta.class).list();
		List lzarDP=session.createCriteria(ZarDatosPersonales.class).list();
		
		for(int k=0; k<lzarC.size(); k++)
        {
			ZarCuenta zc=(ZarCuenta)lzarC.get(k);
			if(correo.equals(zc.getEmail())){
				for(int i=0; i<lzarDP.size(); i++)
		        {
					ZarDatosPersonales zdp=(ZarDatosPersonales)lzarDP.get(i);
					if(zdp.getId()==zc.getIdDatosPersonales())
						return zdp.getPrimerNombre()+" "+zdp.getApellidoPaterno();
		        }
			}
				
        }
		return " ";
	}

}
